output_folder=/opt/j3mifier/out
test_image=/opt/j3mifier/samples/sample_image.jpg
test_video=/opt/j3mifier/samples/sample_video2.mkv
test_j3m=/opt/j3mifier/samples/sample_j3m.json

# image specs
image_input_types=gif,jpg,jpeg,png
image_metadata_file_ext=json
image_keywords_file_ext=json
image_keyword_container_elements=data.annotations.subject.alias,data.annotations.timestamp
image_keywords_excluded_words=a,the,is,are,am,was

image_thumb_file_ext=jpg
image_thumb_height=100
image_thumb_width=100

image_small_height=200
image_small_width=200
image_med_height=300
image_med_width=300
image_large_height=400
image_large_width=400

# video specs
video_input_types=mkv,mp4
video_metadata_file_ext=json
video_still_file_ext=jpg
video_converted_format=mp4


#encoder requires even values and scale may automatically choose an odd value resulting in an error: width or height not divisible by 2. You can tell scale to choose an even value for a given height (720 in this example):scale="trunc(oh*a*2)/2:720"...or a given width (1280 in this example):scale="1280:trunc(ow/a/2)*2"
video_small_height=trunc(ow/a/2)*2
video_small_width=200
video_med_height=trunc(ow/a/2)*2
video_med_width=300
video_large_height=trunc(ow/a/2)*2
video_large_width=400


#ffmpeg commands
ffmpeg_version=ffmpeg.exe -version
ffmpeg_get_attachement=ffmpeg -y -dump_attachment:t <outfile> -i <infile>
ffmpeg_change_format=ffmpeg -y -i <infile> -vcodec copy -acodec copy <outfile>
ffmpeg_change_resolution=ffmpeg -y -i <infile> -filter:v scale=<width>:<height> -acodec copy <outfile>
ffmpeg_create_still=ffmpeg -y -i <infile> -f image2 -ss 0.342 -vframes 1 <outfile>
ffmpeg_theora=ffmpeg2theora <infile>

#j3m commands
j3m_get_metadata=cat /opt/j3mifier/samples/sample_j3m.json
